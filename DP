public class Solution {
    public int findIntegers(int num) {
        String sb=Integer.toBinaryString(num);
        int n=sb.length();
        
        //a[i]: the number of binary numbers with prefix 0 and length i+1;
        //b[i]: the number of binary numbers with prefix 1 and length i+1;
        int[] a=new int[n];
        int[] b=new int[n];
        
        a[0]=b[0]=1;
        for(int i=1;i<n;i++){
            //we can only prepend 0 to 1;
            //we can prepend 1 or 0 to 0;
            //Similar to Fibonacci sequence;
            a[i]=a[i-1]+b[i-1];
            b[i]=a[i-1];
        }
        
        int res=a[n-1]+b[n-1];
        //if "11" occurs, all of the valid numbers are less than num, return;
        //if "00" occurs, the numbers with prefix 1 at position i+1 is over-counted, substract the corressponding b with length n-(i+1);
        //if "10" or "01" occurs, continue;
        for(int i=0;i<n-1;i++){
            if(sb.charAt(i)=='1'&&sb.charAt(i+1)=='1') break;
            if(sb.charAt(i)=='0'&&sb.charAt(i+1)=='0') res-=b[n-1-(i+1)];
        }
        
        return res;
    }
}
